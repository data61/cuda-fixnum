
namespace internal {
    __constant__ int DIGITREMAP[WARPSIZE / 2][2][WARPSIZE - 1] = {
        {
            {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },
            {  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
        },
        {
            {  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 16 },
            {  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 17 }
        },
        {
            {  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 16, 17 },
            {  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 18, 18 }
        },
        {
            {  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 16, 17, 18 },
            {  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 19, 19, 19 }
        },
        {
            {  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 16, 17, 18, 19 },
            {  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 20, 20, 20, 20 }
        },
        {
            {  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 16, 17, 18, 19, 20 },
            {  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 21, 21, 21, 21, 21 }
        },
        {
            {  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 16, 17, 18, 19, 20, 21 },
            {  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 22, 22, 22, 22, 22, 22 }
        },
        {
            {  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 16, 17, 18, 19, 20, 21, 22 },
            {  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 23, 23, 23, 23, 23, 23, 23 }
        },
        {
            {  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 17, 18, 19, 20, 21, 22, 23 },
            {  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 24, 24, 24, 24, 24, 24, 24, 24 }
        },
        {
            {  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 16, 17, 18, 19, 20, 21, 22, 23, 24 },
            { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 25, 25, 25, 25, 25, 25, 25, 25, 25 }
        },
        {
            { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },
            { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26 }
        },
        {
            { 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 },
            { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27 }
        },
        {
            { 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 },
            { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28 }
        },
        {
            { 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 },
            { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 }
        },
        {
            { 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
            { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 }
        },
        {
            { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
            { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 }
        }
    };

    /*
     * Adapt "rediagonalisation" trick described in Figure 4 of Ozturk,
     * Guilford, Gopal (2013) "Large Integer Squaring on Intel
     * Architecture Processors".
     */
    template< typename layout >
    __device__ void
    sqr_lo(fixnum &r, fixnum a)
    {
        int L = layout::laneIdx(), T = layout::topLaneIdx;
        fixnum cy = 0;
        fixnum a1, a2;

        // WARNING: See section "Dynamic Indexing with Non-Uniform Access"
        // here:
        // https://devblogs.nvidia.com/parallelforall/fast-dynamic-indexing-private-arrays-cuda/
        // Suggests that it might be wise to put threadmap in shared memory.
        for (int i = 0; i < layout::WIDTH / 2; ++i) {
            // TODO: Investigate whether we are actually traversing this array
            // in the "right" way according to its memory layout. Might we want
            // to take a "transpose" so that we iterate over DIGITREMAP[0][L][i]
            // for example?
            int src1 = DIGITREMAP[i][0][L];
            int src2 = DIGITREMAP[i][1][L];
            a1 = (L == T) ? 0 : shfl(a, src1);
            a2 = (L == T) ? 0 : shfl(a, src2);

            internal::mad_hi_cc(r, cy, a1, a2, r);
            r = shfl_up0(r, 1);
            cy = shfl_up0(cy, 1);
            internal::mad_lo_cc(r, cy, a1, a2, r);
        }

        cy = shfl_up(cy, 1);
        fixnum::add(r, r, cy);

        // FIXME: Still need to calculate and add the squares on diagonal.

        // r *= 2
        fixnum::lshift(r, r, 1);
    }

}
